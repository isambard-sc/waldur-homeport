include:
  - project: "waldur/waldur-pipelines"
    file: "/templates/stages.yml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/release/publish.yml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/validate/docker-compose-trigger.yml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/test/lint-docker-image.yaml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/test/lint-dockerfile.yaml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/test/lint-md-files.yml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/deploy/dev-env-update.yml"

variables:
  COMPONENT_VERSION: "latest"

image: registry.hpc.ut.ee/mirror/library/node:lts-alpine

cache:
  key: "$CI_COMMIT_REF_NAME"
  policy: pull
  paths:
    - .yarn
    - node_modules/

before_script:
  - apk add git || echo "Non-Alpine image, skipping"
  - yarn config set cache-folder .yarn
  - yarn install --frozen-lockfile

Run linters:
  stage: test
  interruptible: true
  rules:
    - if: '$SKIP_TESTS == "true" || $SKIP_TESTS == "yes"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - src/**/*.css
        - src/**/*.scss
        - src/**/*.ts
        - src/**/*.tsx
        - package.json
        - yarn.lock
        - tsconfig.json
        - typings.d.ts
        - vite.config.ts
        - .eslintrc.cjs
        - .eslintignore
  script:
    - yarn oxlint
    - yarn format:check
    - yarn tsc -b
    - yarn lint:check
    - yarn style:check
    - yarn deps:unused
    - yarn deps:circular

Run code duplication detection:
  stage: test
  interruptible: true
  rules:
    - if: '$SKIP_TESTS == "true" || $SKIP_TESTS == "yes"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - src/**/*.css
        - src/**/*.scss
        - src/**/*.ts
        - src/**/*.tsx
        - .gitlab-ci.yml
  script:
    - npm install -g jscpd
    - npx jscpd src/ --exitCode 1 -r consoleFull --pattern "**/*.scss"
    - npx jscpd src/ --exitCode 1 -r consoleFull --pattern "**/*.tsx" -k 250

Run unit tests:
  stage: test
  interruptible: true
  rules:
    - if: '$SKIP_TESTS == "true" || $SKIP_TESTS == "yes"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - src/**/*.css
        - src/**/*.scss
        - src/**/*.ts
        - src/**/*.tsx
        - package.json
        - yarn.lock
        - tsconfig.json
        - typings.d.ts
        - vite.config.ts
        - test/*
      allow_failure: true
  script:
    - yarn vitest --run --reporter junit --outputFile junit.xml
  coverage: /All\sfiles.*?\s+(\d+.\d+)/
  artifacts:
    when: always
    reports:
      junit: junit.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml

Run E2E tests:
  image:
    name: registry.hpc.ut.ee/mirror/cypress/included:13.15.0
    entrypoint: [""]
  stage: test
  interruptible: true
  rules:
    - if: '$SKIP_TESTS == "true" || $SKIP_TESTS == "yes"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - src/**/*.css
        - src/**/*.scss
        - src/**/*.ts
        - src/**/*.tsx
        - package.json
        - yarn.lock
        - tsconfig.json
        - typings.d.ts
        - vite.config.ts
        - cypress/**/*
        - cypress.config.js
      allow_failure: true
  script:
    - NO_COLOR=1 yarn ci:test
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - cypress/screenshots
      - cypress/videos
    reports:
      junit:
        - cypress/results/output-*.xml

Build artifact:
  stage: build
  interruptible: true
  rules:
    - if: '$SKIP_TESTS == "true" || $SKIP_TESTS == "yes"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop"'
  script:
    - yarn build
  artifacts:
    paths:
      - dist/
    expire_in: 1 week

Publish latest docker image:
  script:
    - AUTH=$(echo -n "${WALDUR_DOCKER_HUB_USER}:${WALDUR_DOCKER_HUB_PASSWORD}" | base64)
    - |
      cat << EOF > /kaniko/.docker/config.json
      {
        "auths": {
          "https://index.docker.io/v1/": {
            "auth": "${AUTH}"
          }
        }
      }
      EOF
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --build-arg="DOCKER_REGISTRY=${DOCKER_REGISTRY}"
      --build-arg="COMMIT_INFO=${CI_COMMIT_SHA}"
      --build-arg="VERSION=latest"
      --destination "opennode/${CI_PROJECT_NAME}:${CI_COMMIT_TAG}"

Publish docker image with specific version:
  script:
    - AUTH=$(echo -n "${WALDUR_DOCKER_HUB_USER}:${WALDUR_DOCKER_HUB_PASSWORD}" | base64)
    - |
      cat << EOF > /kaniko/.docker/config.json
      {
        "auths": {
          "https://index.docker.io/v1/": {
            "auth": "${AUTH}"
          }
        }
      }
      EOF
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --build-arg="DOCKER_REGISTRY=${DOCKER_REGISTRY}"
      --build-arg="COMMIT_INFO=${CI_COMMIT_TAG}"
      --build-arg="VERSION=$CI_COMMIT_TAG"
      --destination "opennode/${CI_PROJECT_NAME}:${CI_COMMIT_TAG}"

Lint docker image:
  extends: .Lint docker image template
  variables:
    IMAGE: opennode/waldur-homeport:latest
    DOCKERFILE: Dockerfile
  before_script: []

Lint dockerfile:
  extends: .Lint dockerfile template
  variables:
    DOCKERFILE: Dockerfile
    HADOLINT_CONFIG: |
      ignored:
        - DL3018 # "versions for `apk add`" warning
  before_script: []

Generate Image SBOM:
  stage: build
  interruptible: true
  image: registry.hpc.ut.ee/iljatest/docker:24.0.6
  services:
    - name: "docker:20.10.16-dind"
      command: ["--mtu=1400"]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_REGISTRY: registry.hpc.ut.ee/mirror/
  cache: []
  before_script: []
  script:
    # Build image locally and generate SBOM
    - docker build --build-arg DOCKER_REGISTRY=$DOCKER_REGISTRY -t waldur-homeport-sbom:local .
    - docker images
    - apk add --no-cache curl
    - curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
    - syft waldur-homeport-sbom:local -v -o cyclonedx-json >> waldur-homeport-${CI_COMMIT_TAG}-image.cyclonedx.json
    - echo "Image SBOM generated. Size:"
    - du -h waldur-homeport-${CI_COMMIT_TAG}-image.cyclonedx.json
    - tar -czf waldur-homeport-${CI_COMMIT_TAG}-image.cyclonedx.tar.gz waldur-homeport-${CI_COMMIT_TAG}-image.cyclonedx.json
    - echo "Image SBOM archived. Size:"
    - du -h waldur-homeport-${CI_COMMIT_TAG}-image.cyclonedx.tar.gz
  artifacts:
    paths:
      - waldur-homeport-${CI_COMMIT_TAG}-image.cyclonedx.tar.gz
    expire_in: 1 day

Generate Codebase SBOM:
  stage: build
  image: registry.hpc.ut.ee/mirror/library/node:lts-alpine
  interruptible: true
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'
  cache: []
  before_script: []
  script:
    - apk add git || echo "Non-Alpine image, skipping"
    - yarn set version berry
    - yarn install --no-immutable
    - yarn dlx -q @cyclonedx/yarn-plugin-cyclonedx --spec-version 1.6 --output-file waldur-homeport-${CI_COMMIT_TAG}-source.cyclonedx.json -v
    - echo "SBOM generated. Size:"
    - du -h waldur-homeport-${CI_COMMIT_TAG}-source.cyclonedx.json
    - tar -czf waldur-homeport-${CI_COMMIT_TAG}-source.cyclonedx.tar.gz waldur-homeport-${CI_COMMIT_TAG}-source.cyclonedx.json
    - echo "SBOM archived. Size:"
    - du -h waldur-homeport-${CI_COMMIT_TAG}-source.cyclonedx.tar.gz
  artifacts:
    paths:
      - waldur-homeport-${CI_COMMIT_TAG}-source.cyclonedx.tar.gz

Upload translatable strings:
  stage: build
  interruptible: true
  rules:
    - if: '$SKIP_I18N_UPLOAD == "true" || $SKIP_I18N_UPLOAD == "yes"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop"'
  image:
    name: registry.hpc.ut.ee/mirror/localazy/cli:latest
  script:
    - sed 's/{\([^}]*\)\}/{__\1__}/g' template.json > template-for-localazy.json
    - localazy upload source -w $LOCALAZY_WRITE_KEY -r $LOCALAZY_READ_KEY
  before_script: []

Download translation:
  stage: test
  interruptible: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" && $CI_PIPELINE_SOURCE == "schedule"'
  image:
    name: registry.hpc.ut.ee/mirror/localazy/cli:latest
  script:
    - apt update && apt install -y git jq
    - git config --global user.name "$GITLAB_USER_NAME"
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - git remote set-url origin "https://gitlab-ci-token:${GITLAB_TOKEN}@$CI_SERVER_HOST/$CI_PROJECT_PATH.git"
    - git fetch origin develop
    - git branch -D new-translations || echo "No translation branch" # cleanup
    - localazy download -w $LOCALAZY_WRITE_KEY -r $LOCALAZY_READ_KEY
    - find locales -type f -name '*.json' -exec sed -i 's/{__\([^}]*\)__\}/{\1}/g' {} \;
    - |
      for file in locales/*.json; do
        echo $file
        if [[ $file == "locales/en.json" ]]; then
          continue
        fi
        jq 'to_entries | map({(.key): .value.message}) | add' "$file" > temp.json  && mv temp.json "$file"
      done
    - rm -f temp.json
    - git status
    - git add locales/*
    - git commit locales -m "Updates translations" || exit 0
    - git status
    - echo "Committing updated translations"
    - git branch new-translations
    - git push --set-upstream origin new-translations:develop
  before_script: []

Update UI developer docs:
  stage: build
  interruptible: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
  image:
    name: registry.hpc.ut.ee/mirror/alpine/git:latest
    entrypoint: [""]
  script:
    - cd /tmp/
    - git clone "https://homeport-token:$DOCS_TOKEN@$CI_SERVER_HOST/waldur/waldur-docs.git"
    - git config --global user.name "$GITLAB_USER_NAME"
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - cd waldur-docs
    - cp -rv $CI_PROJECT_DIR/docs/* docs/developer-guide/ui
    - git add docs/developer-guide/ui
    - git commit -m "Update UI developer docs" || exit 0
    - git branch new-ui-guide
    - git push --set-upstream origin new-ui-guide:master
  before_script: []

Build test docker image:
  stage: test
  interruptible: true
  image:
    name: "gcr.io/kaniko-project/executor:debug"
    entrypoint: [""]
  rules:
    - if: '$SKIP_TESTS == "true" || $SKIP_TESTS == "yes"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  before_script:
    - echo "[+] Build and publish docker image for merge request ${CI_MERGE_REQUEST_ID}"
    - mkdir build-info
    - echo $CI_COMMIT_SHA > build-info/COMMIT_SHA
  script:
    - echo $CI_REGISTRY_IMAGE:$CI_MERGE_REQUEST_ID
    - AUTH=$(echo -n "${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD}" | base64)
    - |
      cat << EOF > /kaniko/.docker/config.json
      {
        "auths": {
          "https://${CI_REGISTRY}": {
            "auth": "${AUTH}"
          }
        }
      }
      EOF
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --registry-map docker.io=registry.hpc.ut.ee/mirror
      --registry-map index.docker.io=registry.hpc.ut.ee/mirror
      --build-arg="DOCKER_REGISTRY=${DOCKER_REGISTRY}"
      --build-arg="ASSET_PATH=/${CI_MERGE_REQUEST_ID}/"
      --destination "${CI_REGISTRY_IMAGE}:${CI_MERGE_REQUEST_ID}"

Test k8s deployment:
  stage: validate
  image:
    name: "registry.hpc.ut.ee/mirror/bitnami/kubectl:1.29.4-debian-12-r2"
    entrypoint: ['']
  interruptible: false
  environment:
    name: test-${CI_MERGE_REQUEST_ID}
    action: start
    on_stop: Cleanup test k8s deployment
    url: https://homeport-testing.waldur.com/${CI_MERGE_REQUEST_ID}/
  rules:
    - if: '$SKIP_TESTS == "true" || $SKIP_TESTS == "yes"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  before_script:
    - export KUBECONFIG=${K8S_CONFIG_WALDUR_HELM_TEST}
    - apt update && apt install gettext -y
  script:
    - kubectl config current-context
    - envsubst < k8s-test/deployment-tpl.yaml > k8s-test/deployment.yaml
    - envsubst < k8s-test/service-tpl.yaml > k8s-test/service.yaml
    - envsubst < k8s-test/ingress-tpl.yaml > k8s-test/ingress.yaml
    - kubectl delete secret waldur-homeport-test-${CI_MERGE_REQUEST_ID} || true
    - kubectl create secret docker-registry waldur-homeport-test-${CI_MERGE_REQUEST_ID} --docker-server=${CI_REGISTRY} --docker-username=${CI_REGISTRY_USER} --docker-password=${CI_REGISTRY_PASSWORD}
    - kubectl apply -f k8s-test/deployment.yaml --wait
    - kubectl apply -f k8s-test/service.yaml
    - kubectl apply -f k8s-test/ingress.yaml
    - kubectl rollout restart deployment waldur-homeport-test-${CI_MERGE_REQUEST_ID}
    # Wait for rollout completion
    - kubectl rollout status deployment waldur-homeport-test-${CI_MERGE_REQUEST_ID} --timeout 120s
    # Wait a bit more to avoid race conditions
    - sleep 5
    - kubectl get pods -l app=waldur-homeport-test-${CI_MERGE_REQUEST_ID} --field-selector=status.phase=Running
    - POD_NAME=$(kubectl get pod -l app=waldur-homeport-test-${CI_MERGE_REQUEST_ID} --sort-by=.metadata.creationTimestamp -o name | tail -n1)
    - echo $POD_NAME
    # Wait until the pod is ready to ensure the image is pulled
    - kubectl wait --timeout=180s --for=condition=Ready=true $POD_NAME
    - kubectl get pods -l app=waldur-homeport-test-${CI_MERGE_REQUEST_ID}
  allow_failure: true

Upload SBOMs to Docs:
  stage: deploy
  needs:
    - "Generate Image SBOM"
    - "Generate Codebase SBOM"
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'
  image:
    name: registry.hpc.ut.ee/mirror/alpine/git:latest
    entrypoint: [""]
  script:
    - cd /tmp/
    - git clone "https://homeport-token:$DOCS_TOKEN@$CI_SERVER_HOST/waldur/waldur-docs.git"
    - git config --global user.name "$GITLAB_USER_NAME"
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - cd waldur-docs
    - echo "Checking for SBOM archives files..."
    - ls -la $CI_PROJECT_DIR/waldur-homeport-${CI_COMMIT_TAG}-image.cyclonedx.tar.gz || { echo "Image SBOM not found!"; exit 1; }
    - ls -la $CI_PROJECT_DIR/waldur-homeport-${CI_COMMIT_TAG}-source.cyclonedx.tar.gz || { echo "Codebase SBOM not found!"; exit 1; }
    - mkdir -p docs/assets/sboms/images docs/assets/sboms/source
    - cp -v $CI_PROJECT_DIR/waldur-homeport-${CI_COMMIT_TAG}-image.cyclonedx.tar.gz docs/assets/sboms/images/
    - cp -v $CI_PROJECT_DIR/waldur-homeport-${CI_COMMIT_TAG}-source.cyclonedx.tar.gz docs/assets/sboms/source/
    - ls -l docs/assets/sboms/images/
    - ls -l docs/assets/sboms/source/
    - git add docs/assets/sboms/images docs/assets/sboms/source
    - git commit -m "Add SBOM for homeport ${CI_COMMIT_TAG}" || exit 0
    - git branch new-sbom
    - git push --set-upstream origin new-sbom:master
  before_script: []

Cleanup test k8s deployment:
  stage: deploy
  image:
    name: "registry.hpc.ut.ee/mirror/bitnami/kubectl:1.29.4-debian-12-r2"
    entrypoint: ['']
  interruptible: false
  rules:
  - if: '$SKIP_TESTS == "true" || $SKIP_TESTS == "yes"'
    when: never
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    when: manual
  environment:
    name: test-${CI_MERGE_REQUEST_ID}
    action: stop
  before_script:
    - export KUBECONFIG=${K8S_CONFIG_WALDUR_HELM_TEST}
  script:
    - kubectl delete secret waldur-homeport-test-${CI_MERGE_REQUEST_ID} || true
    - kubectl delete deployment waldur-homeport-test-${CI_MERGE_REQUEST_ID} || true
    - kubectl delete service waldur-homeport-test-${CI_MERGE_REQUEST_ID} || true
    - kubectl delete ingress waldur-homeport-test-${CI_MERGE_REQUEST_ID} || true

Cleanup previous k8s test deployment:
  extends: Cleanup test k8s deployment
  stage: .pre
  rules:
  - if: '$SKIP_TESTS == "true" || $SKIP_TESTS == "yes"'
    when: never
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
